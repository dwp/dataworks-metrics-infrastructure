meta:
  plan:
    create-credentials:
      task: create-credentials
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x
              source /assume-role
              creds=$(cat << EOF  
              {
              "grafana": 
              {
              "username": "${GRAFANA_USER}", 
              "password": "${GRAFANA_PASSWORD}"  
              }
              }
              EOF
              )
              echo $creds > creds.json            
              aws secretsmanager put-secret-value --secret-id /concourse/dataworks/monitoring/credentials --secret-string file://creds.json
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        GRAFANA_USER: ((dataworks-secrets.grafana_user_mgt_dev))
        GRAFANA_PASSWORD: ((dataworks-secrets.grafana_password_mgt_dev)) 
        
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
              cp modules/vpc/vpc.tf ../terraform-config
              cp modules/vpc/outputs.tf ../terraform-config
          dir: dataworks-metrics-infrastructure
        inputs:
          - name: dataworks-metrics-infrastructure
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2
        AWS_SECRETS_ROLE: arn:aws:iam::((aws_account.management-dev)):role/ci

    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_13_version))
            tag: ((dataworks.terraform_13_version))
        run:
          path: sh
          args:
            - -exc
            - |
              exit_status=0
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              cp -r ../dataworks-dashboards config/grafana/provisioning/dashboards
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              cp ../terraform-config/vpc.tf modules/vpc/vpc.tf
              cp ../terraform-config/outputs.tf modules/vpc/outputs.tf
              terraform workspace show
              terraform init
              terraform plan -detailed-exitcode -out terraform.plan || exit_status=$?
              if [ $exit_status -eq 0 ]; then
                  echo "No changes, not applying"
              elif [ $exit_status -eq 1 ]; then
                  echo "Terraform plan failed"
                  exit 1
              elif [ $exit_status -eq 2 ]; then
                  terraform apply -auto-approve terraform.plan
                  touch ../terraform-success/success
              fi
          dir: dataworks-metrics-infrastructure
        inputs:
          - name: dataworks-metrics-infrastructure
          - name: terraform-config
          - name: dataworks-dashboards
          - name: dw-al2-ecs-ami
        outputs:
          - name: terraform-success
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_INPUT: "false"

    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_13_version))
            tag: ((dataworks.terraform_13_version))
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../terraform-success/success ]; then
                export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
                cp -r ../dataworks-dashboards config/grafana/provisioning/dashboards
                cp ../terraform-config/terraform.tf .
                cp ../terraform-config/terraform.tfvars .
                cp ../terraform-config/vpc.tf modules/vpc/vpc.tf
                cp ../terraform-config/outputs.tf modules/vpc/outputs.tf
                terraform workspace show
                terraform init

                if [[ "${SKIP_EXIT_CODE}" == "true" ]]; then
                  echo "Performing plan with no exit code check due to SKIP_EXIT_CODE of '${SKIP_EXIT_CODE}'"
                  terraform plan
                else
                  echo "Performing plan with exit code check due to SKIP_EXIT_CODE of '${SKIP_EXIT_CODE}'"
                  terraform plan -detailed-exitcode
                fi
              else
                  echo "Nothing to plan exiting"
                  exit 0 
              fi
          dir: dataworks-metrics-infrastructure
        inputs:
          - name: dataworks-metrics-infrastructure
          - name: terraform-config
          - name: dataworks-dashboards
          - name: dw-al2-ecs-ami
          - name: terraform-success
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"

    cycle-containers:
      task: cycle-containers
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f terraform-success/success ]; then
                export AWS_DEFAULT_REGION
                source /assume-role
                set +x
                TASK_IDS=$(aws ecs list-tasks --cluster $CLUSTER --family $SERVICE | jq .taskArns | jq .[] | tr -d '\"' | sed 's|.*/||')
                for TASK_ID in $TASK_IDS; do
                  aws ecs stop-task --cluster $CLUSTER --task $TASK_ID
                done
              else
                  echo "No terraform changes exiting"
                  exit 0
              fi
        inputs:
          - name: terraform-success
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci

    admin-enable:
      task: admin-enable
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
            tag: latest
        run:
          path: sh
          args:
            - -exc
            - |
              touch terraform-success/success
        outputs:
          - name: terraform-success

    create-terraform-success:
      task: create-terraform-success
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_13_version))
            tag: ((dataworks.terraform_13_version))
        run:
          path: sh
          args:
            - -exc
            - |
              touch ../terraform-success/success
          dir: dataworks-metrics-infrastructure
        inputs:
          - name: dataworks-metrics-infrastructure
        outputs:
          - name: terraform-success

    terminate-ecs-instances:
      task: terminate-ecs-instances
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              ami_id=$(cat dw-al2-ecs-ami/id)
              source /assume-role
              set -x

              instance_ids=$(aws ec2 describe-instances --filters Name=tag:Name,Values=metrics-ecs-cluster-* Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].InstanceId')

              for instance_id in $instance_ids;
                do
                  aws ec2 terminate-instances --instance-ids "$instance_id"
                done;

              desired_capacity=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$ASG_NAME" | jq -r '.AutoScalingGroups[0].DesiredCapacity')

              count=0
              max_retries="$MAX_RETRIES"

              while [ "$count" -lt "$max_retries" ]
                do
                  sleep "$SLEEP_TIME"
                  instance_ids=$(aws ec2 describe-instances --filters Name=tag:Name,Values=metrics-ecs-cluster-* Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[].InstanceId')
                  #instance_count=$(echo "${#instance_ids[@]}")
                  instance_count=$(echo $instance_ids | tr ' ' '\n' | wc -l)
                  if [[ $instance_count -eq $desired_capacity ]]; then
                    image_ids="$(aws ec2 describe-instances --instance-ids $instance_ids | jq -r '.Reservations[] | .Instances[] | .ImageId')"
                    for i in $image_ids; do
                      if [ ! "$i" == "$ami_id" ]; then
                        echo "Instance found with wrong AMI ID, Exiting..."
                        exit 1
                      fi;
                    done;
                    echo "All desired instances are running untested AMI, Exiting with success..."
                    exit 0
                  fi;
                  let "count+=1"
                done;
              echo "Cluster was unable to start desired instances with untested AMI in expected timeframe, Exiting with error..."
              exit 1
        inputs:
          - name: dw-al2-ecs-ami
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
        ASG_NAME: metrics-cluster
        SLEEP_TIME: 60
        MAX_RETRIES: 10

    test-ecs-ami:
      task: test-ecs-ami
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              max_retries=5
              task_json="$(aws ecs run-task --cluster "$CLUSTER_NAME" --capacity-provider-strategy="metrics-cluster" --task-definition test_ecs_ami --overrides "{\"containerOverrides\": [{\"name\": \"test-ecs-ami\", \"command\": [\"sh\", \"-c\", \"sleep 300\"]}]}")"
              task_arn=$(echo $task_json | jq -r '.tasks[0].taskArn')
              while [ $max_retries > 0 ]
              do
                sleep 15
                task_json="$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks $task_arn)"
                container_status="$(echo "$task_json" | jq -r '.tasks[0].containers[0].lastStatus')"
                if [ "$container_status" == "RUNNING" ]; then
                  exit 0
                fi
                let "max_retries-=1"
              done
              exit 1
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci
        CLUSTER_NAME: metrics

    ami-test-results:
      task: ami-test-result
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
          GITHUB_TOKEN: ((dataworks-secrets.concourse_github_pat))
        run:
          path: sh
          args:
            - -exc
            - |
              set +x

              AMI_ID=$(cat dw-al2-ecs-ami/id)
              DATE=$(date -u)
              PIPELINE="$(cat meta/build_pipeline_name)"

              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"

              git clone https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
              cd ami-builder-configs/results

              echo "$AMI_ID $RESULT" > "$PIPELINE.test"

              git add "$PIPELINE.test"
              git commit -m "Updating $PIPELINE AMI test on ${DATE}"
              git push https://${GITHUB_TOKEN}:x-oauth-basic@github.com/dwp/ami-builder-configs
        inputs:
          - name: meta
          - name: dw-al2-ecs-ami
