meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-config
              cp terraform.tfvars ../terraform-config
              cp modules/vpc/vpc.tf ../terraform-config
              cp modules/vpc/outputs.tf ../terraform-config
          dir: dataworks-metrics-infrastructure
        inputs:
          - name: dataworks-metrics-infrastructure
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2
        AWS_SECRETS_ROLE: arn:aws:iam::((aws_account.management-dev)):role/ci
    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              exit_status=0
              export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
              cp -r ../dataworks-dashboards config/grafana/provisioning/dashboards
              cp ../terraform-config/terraform.tf .
              cp ../terraform-config/terraform.tfvars .
              cp ../terraform-config/vpc.tf modules/vpc/vpc.tf
              cp ../terraform-config/outputs.tf modules/vpc/outputs.tf
              terraform workspace show
              terraform init
              terraform plan -detailed-exitcode -out terraform.plan || exit_status=$?
              if [ $exit_status -eq 0 ]; then
                  echo "No changes, not applying"
              elif [ $exit_status -eq 1 ]; then
                  echo "Terraform plan failed"
                  exit 1
              elif [ $exit_status -eq 2 ]; then
                  terraform apply -auto-approve terraform.plan
                  touch ../terraform-success/success
              fi
          dir: dataworks-metrics-infrastructure
        inputs:
          - name: dataworks-metrics-infrastructure
          - name: terraform-config
          - name: dataworks-dashboards
          - name: dw-al2-ecs-ami
        outputs:
          - name: terraform-success
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_INPUT: "false"
    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f ../terraform-success/success ]; then
                export TF_VAR_ecs_hardened_ami_id=$(cat ../dw-al2-ecs-ami/id)
                cp -r ../dataworks-dashboards config/grafana/provisioning/dashboards
                cp ../terraform-config/terraform.tf .
                cp ../terraform-config/terraform.tfvars .
                cp ../terraform-config/vpc.tf modules/vpc/vpc.tf
                cp ../terraform-config/outputs.tf modules/vpc/outputs.tf
                terraform workspace show
                terraform init
                terraform plan -detailed-exitcode
              else
                  echo "Nothing to plan exiting"
                  exit 0 
              fi
          dir: dataworks-metrics-infrastructure
        inputs:
          - name: dataworks-metrics-infrastructure
          - name: terraform-config
          - name: dataworks-dashboards
          - name: dw-al2-ecs-ami
          - name: terraform-success
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"
    cycle-containers:
      task: cycle-containers
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        run:
          path: sh
          args:
            - -exc
            - |
              if [ -f terraform-success/success ]; then
                export AWS_DEFAULT_REGION
                source /assume-role
                set +x
                TASK_IDS=$(aws ecs list-tasks --cluster $CLUSTER --family $SERVICE | jq .taskArns | jq .[] | tr -d '\"' | sed 's|.*/||')
                for TASK_ID in $TASK_IDS; do
                  aws ecs stop-task --cluster $CLUSTER --task $TASK_ID
                done
              else
                  echo "No terraform changes exiting"
                  exit 0
              fi
        inputs:
          - name: terraform-success
      params:
        AWS_DEFAULT_REGION: ((dataworks.aws_region))
        AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
    admin-enable:
      task: admin-enable
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
            tag: latest
        run:
          path: sh
          args:
            - -exc
            - |
              touch terraform-success/success
        outputs:
          - name: terraform-success
