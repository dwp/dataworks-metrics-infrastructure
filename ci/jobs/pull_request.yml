jobs:
- name: dataworks-metrics-infrastructure-pr
  max_in_flight: 1
  plan:
  - get: dw-al2-ecs-ami
  - get: dataworks-metrics-infrastructure-pr
    trigger: true
    version: every
  - get: dataworks-dashboards
  - put: dataworks-metrics-infrastructure-pr
    params:
      path: dataworks-metrics-infrastructure-pr
      status: pending

  - .: (( inject meta.plan.create-terraform-success ))
    input_mapping:
      dataworks-metrics-infrastructure: dataworks-metrics-infrastructure-pr

  - .: (( inject meta.plan.terraform-bootstrap ))
    task: terraform-bootstrap-management
    input_mapping:
      dataworks-metrics-infrastructure: dataworks-metrics-infrastructure-pr
    params:
      TF_WORKSPACE: management
      AWS_SECRETS_ROLE: arn:aws:iam::((aws_account.management)):role/ci

  - .: (( inject meta.plan.terraform-apply ))
    task: terraform-plan-management
    input_mapping:
      dataworks-metrics-infrastructure: dataworks-metrics-infrastructure-pr
    params:
      TF_WORKSPACE: management
      SKIP_EXIT_CODE: "true"
    on_failure:
      put: dataworks-metrics-infrastructure-pr
      params:
        path: dataworks-metrics-infrastructure-pr
        status: failure

  - .: (( inject meta.plan.terraform-bootstrap ))
    task: terraform-bootstrap-qa
    input_mapping:
      dataworks-metrics-infrastructure: dataworks-metrics-infrastructure-pr
    params:
      TF_WORKSPACE: qa
      AWS_SECRETS_ROLE: arn:aws:iam::((aws_account.management-dev)):role/ci

  - .: (( inject meta.plan.terraform-plan ))
    task: terraform-plan-qa
    input_mapping:
      dataworks-metrics-infrastructure: dataworks-metrics-infrastructure-pr
    params:
      TF_WORKSPACE: qa
      SKIP_EXIT_CODE: "true"
    on_failure:
      put: dataworks-metrics-infrastructure-pr
      params:
        path: dataworks-metrics-infrastructure-pr
        status: failure
    on_success:
      put: dataworks-metrics-infrastructure-pr
      params:
        path: dataworks-metrics-infrastructure-pr
        status: success
