jobs:
- name: dataworks-metrics-infrastructure-pr
  plan:
  - get: dataworks-metrics-infrastructure-pr
    trigger: true
    version: every
  - get: dataworks-dashboards
  - put: dataworks-metrics-infrastructure-pr
    params:
      path: dataworks-metrics-infrastructure-pr
      status: pending
  - .: (( inject meta.plan.terraform-bootstrap ))
    input_mapping:
      dataworks-metrics-infrastructure: dataworks-metrics-infrastructure-pr
  - task: terraform-plan
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: hashicorp/terraform
          version: ((dataworks.terraform_version))
          tag: ((dataworks.terraform_version))
      params:
        TF_VAR_grafana_username: ((dataworks-secrets.grafana_user))
        TF_VAR_grafana_password: ((dataworks-secrets.grafana_password))
        TF_INPUT: false
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_CLI_ARGS_plan:  -lock-timeout=300s
      run:
        path: sh
        dir: dataworks-metrics-infrastructure-pr
        args:
        - -exc
        - |
          cp -r ../dataworks-dashboards config/grafana/provisioning/dashboards
          cp ../terraform-config/terraform.tf .
          cp ../terraform-config/terraform.tfvars .
          cp ../terraform-config/vpc.tf modules/vpc/vpc.tf
          cp ../terraform-config/outputs.tf modules/vpc/outputs.tf
          terraform init
          terraform workspace show
          terraform plan
      inputs:
      - name: dataworks-metrics-infrastructure-pr
      - name: terraform-config
      - name: dataworks-dashboards
    on_failure:
      put: dataworks-metrics-infrastructure-pr
      params:
        path: dataworks-metrics-infrastructure-pr
        status: failure
    on_success:
      put: dataworks-metrics-infrastructure-pr
      params:
        path: dataworks-metrics-infrastructure-pr
        status: success
