terraform {
  required_version = "{{terraform_12_version}}"

  backend "s3" {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/dataworks-metrics-infrastructure.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "internet_egress" {
  backend   = "s3"
  workspace = lookup(local.slave_peerings, local.environment) == "management-dev" ? "default" : "management"

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-internet-egress.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "security-tools" {
  backend = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-security-tools.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "management" {
  backend   = "s3"
  workspace = lookup(local.slave_peerings, local.environment) == "management-dev" ? "default" : "management"

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/management.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "management_dns" {
  backend   = "s3"
  workspace = "management"

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/management.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "management_dmi" {
  backend   = "s3"
  workspace = lookup(local.slave_peerings, local.environment)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/dataworks-metrics-infrastructure.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "common" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/common.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_concourse" {
  backend   = "s3"
  workspace = lookup(local.slave_peerings, local.environment) == "management-dev" ? "default" : "management"

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-concourse.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_ingestion" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-ingestion.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_analytical_dataset_generation" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-analytical-dataset-generation.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_pdm_dataset_generation" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-pdm-dataset-generation.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_internal_compute" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-internal-compute.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_analytical_env_infra" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-analytical-environment_infra.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_analytical_env_app" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-analytical-environment-app.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_ingest-consumers" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/dataworks-aws-ingest-consumers.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_sdx" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-sdx.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "dataworks-aws-data-egress" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/dataworks-aws-data-egress.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_crypto" {
  backend   = "s3"
  workspace = local.crypto_workspace[local.slave_peerings[local.environment]]

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-crypto.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "analytical-service-infra" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/analytical-service-infra.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "orchestration-service" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/orchestration-service.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "snapshot_sender" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-snapshot-sender.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "ucfs-claimant" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/ucfs-claimant.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
} 

data "terraform_remote_state" "aws-azkaban" {
  backend   = "s3"
  workspace = lookup(local.common_workspace, terraform.workspace)

  config = {
    bucket         = "{{state_file_bucket}}"
    key            = "terraform/dataworks/aws-azkaban.tfstate"
    region         = "{{state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
} 

variable "assume_role" {
  default = "ci"
}

variable "region" {
  default = "eu-west-2"
}

provider "aws" {
  version = "~> 3.25.0"
  region  = var.region

  assume_role {
    role_arn = "arn:aws:iam::${lookup(local.account, local.environment)}:role/${var.assume_role}"
  }
}

provider "aws" {
  version = "~> 3.25.0"
  alias   = "management"
  region  = var.region

  assume_role {
    role_arn = "arn:aws:iam::${local.account.management}:role/${var.assume_role}"
  }
}

// Get AWS Account ID for credentials in use
data "aws_caller_identity" "current" {}

data "aws_region" "current" {}
data "aws_availability_zones" "available" {}

locals {
  account = { {% for key, value in accounts.items() %}
    {{key}} = "{{value}}"{% endfor %}
  }
}

locals {

  cidr_block_cicd_vpc = local.environment == "management" || local.environment == "management-dev" ? local.cidr_block[local.environment].ci-cd-vpc : "0.0.0.0/0"
  cidr_block_internal_compute_vpc = local.environment != "management" && local.environment != "management-dev" ? local.cidr_block[local.environment].internal-compute-vpc : "0.0.0.0/0"
  cidr_block_ingest_vpc           = local.environment != "management" && local.environment != "management-dev" ? local.cidr_block[local.environment].ingest-vpc : "0.0.0.0/0"
  cidr_block_mon_master_vpc = local.environment == "management" || local.environment == "management-dev" ? [local.cidr_block[local.environment].mon-master-vpc] : ["0.0.0.0/0"]

  parent_domain_name = {
    management-dev = "mgt-dev.${var.parent_domain_name}"
    management = var.parent_domain_name
    development = "dev.${var.parent_domain_name}"
    qa = "qa.${var.parent_domain_name}"
    integration = "int.${var.parent_domain_name}"
    preprod = "preprod.${var.parent_domain_name}"
    production = "prod.${var.parent_domain_name}"
  }

  slave_peerings = {
    management-dev = "management-dev"
    management = "management"
    development = "management-dev"
    qa = "management-dev"
    integration = "management-dev"
    preprod = "management"
    production = "management"
  }

  master_peerings = {
    management-dev = ["management-dev", "development", "qa", "integration"]
    management = ["management", "preprod", "production"]
  }

  crypto_workspace = {
    management-dev = "management-dev"
    management     = "management"
  }

  dns_zone_ids = {
    management-dev = {
      development = "Z02358887RGCSSD0V4J9"
      qa = "Z069618828GNI303SDYTE"
      integration = "Z070873634CP7OEVEEW1J"
    }
    management = {
      preprod = "Z02904251L1YCSWE9C0HU"
      production = "Z0713033EGP0T6GNEAE6"
    }
  }

  common_workspace = {
    management-dev = "default"
    management     = "preprod"
    default        = "default"
    qa             = "qa"
    integration    = "integration"
    preprod        = "preprod"
    production     = "production"
  }

  roles = [{% for value in roles %}"{{value}}"{{ "," if not loop.last }}{% endfor %}]

  environment = terraform.workspace == "default" ? "development" : terraform.workspace

  primary_role_index = 0
  secondary_role_index = index(local.roles, var.secondary)

  management_envs = ["management-dev", "management"]

  is_management_env = contains(local.management_envs, local.environment)

  tags = {
  {% for key, value in common_tags.items() %}
    {{key}} = "{{value}}"{% endfor %}
    Name         = "prometheus"
    Environment  = local.environment
    Project      = "monitoring"
    Application  = "dataworks-metrics-infrastructure"
    Persistence  = "Ignore"
    AutoShutdown = "False"
  }

  root_dns_name = {
    development = "dev.wip.{{dataworks_domain_name}}"
    qa          = "qa.wip.{{dataworks_domain_name}}"
    integration = "int.wip.{{dataworks_domain_name}}"
    preprod     = "pre.{{dataworks_domain_name}}"
    production  = "{{dataworks_domain_name}}"
  }

  cidr_block = {
  {% for environment, ranges in cidr_block.items() %}
      {{ environment }} = {
        {% for key, value in ranges.items() %}
          {{ key }} = "{{ value }}"{% endfor %}
      } {% endfor %}
  }

  zone_count = length(data.aws_availability_zones.current.zone_ids)
  zone_names = data.aws_availability_zones.current.names

  metrics_ecs_friendly_name = "metrics-ecs-cluster"
  metrics_friendly_name = "metrics-cluster"
  cluster_name              = replace(local.metrics_ecs_friendly_name, "-ecs-cluster", "")

  iam_role_max_session_timeout_seconds = 43200

  cw_agent_namespace_metrics_ecs      = "/app/${local.metrics_ecs_friendly_name}"
  cw_agent_log_group_name_metrics_ecs = "/app/${local.metrics_ecs_friendly_name}"

  metrics_ecs_cluster_asg_autoshutdown = {
    development = "False"
    qa          = "False"
    integration = "False"
    preprod     = "False"
    production  = "False"
    management     = "False"
    management-dev = "False"
  }

  metrics_ecs_cluster_asg_ssmenabled = {
    development = "True"
    qa          = "True"
    integration = "True"
    preprod     = "False"
    production  = "False"
    management     = "False"
    management-dev = "False"
  }

  ebs_volume_size = {
    development = 667
    qa          = 667
    integration = 667
    preprod     = 667
    production  = 667
    management     = 667
    management-dev = 667
  }

  ebs_volume_type = {
    development = "gp3"
    qa          = "gp3"
    integration = "gp3"
    preprod     = "gp3"
    production  = "gp3"
    management     = "gp3"
    management-dev = "gp3"
  }

  mgmt_ebs_volume_size = {
    development = 667
    qa          = 667
    integration = 667
    preprod     = 667
    production  = 667
    management     = 667
    management-dev = 667
  }

  mgmt_ebs_volume_type = {
    development = "gp3"
    qa          = "gp3"
    integration = "gp3"
    preprod     = "gp3"
    production  = "gp3"
    management     = "gp3"
    management-dev = "gp3"
  }

  metrics_ecs_asg_tags = merge(
    local.tags,
    {
      Name              = local.metrics_ecs_friendly_name,
      AutoShutdown      = local.metrics_ecs_cluster_asg_autoshutdown[local.environment],
      SSMEnabled        = local.metrics_ecs_cluster_asg_ssmenabled[local.environment],
      Persistence       = "Ignore",
      AmazonECSManaged  = ""
    }
  )
}

data "aws_iam_user" "breakglass" {
  user_name = "breakglass"
}

data "aws_iam_role" "ci" {
  name = "ci"
}

data "aws_iam_role" "administrator" {
  name = "administrator"
}

data "aws_iam_role" "aws_config" {
  name = "aws_config"
}
